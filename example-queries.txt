//CONNECT TO THE GUESTBOOKDB

\c guestbookdb gb_readonly 127.0.0.1 2345
\f ','
\a
\t
\o 'hud.csv'

//fix integrity problem
SELECT setval('guestbook_service_idservice_seq', (SELECT MAX(idservice) FROM guestbook_service));

psql --host=localhost --port=2346 --dbname=guestbookdb --username=postgres --password=


psql --host=localhost --port=2345 --dbname=guestbookdb --username=gb_readonly --password=C80886521

//show people by the date which they first reqistered  (most recent first)
SELECT firstname, lastname, aliasname, "timelineStartDate" from guestbook_person order by "timelineStartDate" desc;

//show people by the date which they first reqistered  (most recent last)
SELECT firstname, lastname, aliasname, "timelineStartDate" from guestbook_person order by "timelineStartDate" asc;

//show how many people are registered
SELECT COUNT(*) from guestbook_person;

\copy (SELECT COUNT(*) from guestbook_person) TO 'headcount.csv' CSV HEADER

//show current clients (defined as having visited in previous INTERVAL)
SELECT firstname, lastname, aliasname, COUNT(*) from guestbook_person
INNER JOIN guestbook_personsnapshot
ON guestbook_person.idperson = guestbook_personsnapshot.person_id 
WHERE guestbook_personsnapshot.timestamp > NOW() - INTERVAL '7 days'
GROUP BY(firstname, lastname, aliasname) ORDER BY COUNT(*) desc;

//show current client count only (defined as having visited in previous INTERVAL)
SELECT COUNT(DISTINCT person_id) from guestbook_personsnapshot
WHERE guestbook_personsnapshot.timestamp > NOW() - INTERVAL '7 days';

//show how many meals have been served in the period
SELECT COUNT(*) from guestbook_personservicerequest
INNER JOIN guestbook_personsnapshot
ON guestbook_personservicerequest.connection_id=guestbook_personsnapshot.idsnapshot 
WHERE guestbook_personservicerequest.service_id=1
AND guestbook_personsnapshot.timestamp > NOW() - INTERVAL '7 days';


//change the service_id to see other services

1  Meals
2  Shower
3  Clothing/Ropa
4  Laundry/LavanderÃ­a
5  Computer
6  Nurse
7  Employment Assistance
8  Housing Assistance
9  Transportation Assistance
10  Pastor Consultation
11  Other Assistanc
12  Food
13  Group Class
14  Referral
15  Financial Assistance
16  Rent
17  Utilities
18  Gas
19  Other

//see how many services COMPLETED in the last 7days (COMPLETED means that staff cleared them off of the queues from the browser)
SELECT COUNT(*) from guestbook_personservicerequest 
INNER JOIN guestbook_personsnapshot
ON guestbook_personservicerequest.connection_id = guestbook_personsnapshot.idsnapshot 
WHERE service_id=1
AND guestbook_personsnapshot.timestamp > NOW() - INTERVAL '7 days'
AND guestbook_personservicerequest.status = '501';

These are the three different status codes for a requested service. Queued means a client requested it, Completed means the client was cleared off of the queue, 
NOTCOMPLETED means either we aren't clearing the queues (Meals) or the day ended and the client was not cleared off of the queue.

SERVICE_STATUS_QUEUED          = 500
SERVICE_STATUS_COMPLETED       = 501
SERVICE_STATUS_NOTCOMPLETED    = 502

//who has registered in the past week?
SELECT firstname, lastname, aliasname from guestbook_person WHERE "timelineStartDate" > NOW() - INTERVAL '7 days';

//who is coming most frequently in the last 7days? (heavy hitters first)
SELECT firstname, lastname, aliasname, COUNT(*) from guestbook_personsnapshot  
INNER JOIN guestbook_person
ON guestbook_personsnapshot.person_id=guestbook_person.idperson
WHERE guestbook_personsnapshot.timestamp > NOW() - INTERVAL '7 days'
GROUP BY (firstname, lastname, aliasname) ORDER BY COUNT(*) desc;

//which services have been most heavily used in the past week, here I am adding another join so you see the results with the Service Name (instead of a number)
SELECT name, COUNT(*) from guestbook_personservicerequest 
INNER JOIN guestbook_personsnapshot
ON guestbook_personservicerequest.connection_id = guestbook_personsnapshot.idsnapshot
INNER JOIN guestbook_service
ON guestbook_personservicerequest.service_id = guestbook_service.idservice
WHERE guestbook_personsnapshot.timestamp > NOW() - INTERVAL '7 days'
GROUP BY (name) ORDER BY COUNT(*) desc;

//what is our busiest day of the week in the past 30days (this counts snapshots - that is # of clients)
SELECT to_char(timestamp,'dy'), COUNT(*) from guestbook_personsnapshot
WHERE guestbook_personsnapshot.timestamp > NOW() - INTERVAL '30 days'
GROUP BY (to_char(timestamp,'dy')) ORDER BY COUNT(*) DESC;

//new (first-time) clients in the last 7 days
SELECT firstname, lastname, aliasname FROM guestbook_person WHERE "timelineStartDate">=NOW() - INTERVAL '7 days'

//clients not seen


\copy (SELECT to_char(timestamp,'dy'), COUNT(*) from guestbook_personsnapshot WHERE guestbook_personsnapshot.timestamp > NOW() - INTERVAL '30 days' GROUP BY (to_char(timestamp,'dy')) ORDER BY COUNT(*) DESC) TO 'busydays.csv' CSV HEADER 

//what is our busiest day of the week in the past 30days (this counts service requests, better measure of business than simply # of clients)
SELECT to_char(timestamp,'dy'), COUNT(*) from guestbook_personservicerequest
INNER JOIN guestbook_personsnapshot
ON guestbook_personservicerequest.connection_id = guestbook_personsnapshot.idsnapshot
WHERE guestbook_personsnapshot.timestamp > NOW() - INTERVAL '30 days'
GROUP BY (to_char(timestamp,'dy')) ORDER BY COUNT(*) DESC;

//how many services delivered in a period
SELECT COUNT(*) from guestbook_personservicerequest
INNER JOIN guestbook_personsnapshot
ON guestbook_personservicerequest.connection_id = guestbook_personsnapshot.idsnapshot
WHERE guestbook_personsnapshot.timestamp > NOW() - INTERVAL '30 days'


SELECT snapshot.timestamp 
FROM
  (SELECT 
     snapshot2.timestamp, 
     lead(snapshot2.timestamp) OVER (ORDER BY snapshot2.timestamp desc) as prev_timestamp
   FROM 
     guestbook_personsnapshot snapshot2
   ORDER BY 
     snapshot2.timestamp desc
   ) as snapshot
WHERE
  snapshot.timestamp IS DISTINCT FROM snapshot2.prev_timestamp
ORDER BY
  snapshot.timestamp desc;


//SHOWS ALL OCCURENCES IN A DATE-RANGE OF SURVEYS WHERE UNSHELTERED HOUSING IS THE RESPONSE
SELECT person.aliasname, snapshot.person_id, snapshot.timestamp, survey.idpersonsurvey, survey.points from guestbook_personsnapshot snapshot 
JOIN guestbook_personsurvey survey ON (snapshot.idsnapshot=survey.connection_id) 
JOIN guestbook_person person ON (person.idperson=snapshot.person_id) 
WHERE (survey.prompt_id=8 AND survey.points=1 AND snapshot.timestamp >= '2018-07-01' AND snapshot.timestamp <= '2018-12-31') 
GROUP BY (person.aliasname, snapshot.person_id, snapshot.timestamp, survey.idpersonsurvey) ORDER BY (snapshot.person_id) asc;

//SHOWS COUNT OF UNSHELTERED NIGHTS FOR EACH PERSON IN A DATE-RANGE 
SELECT person.firstname, person.lastname, person.aliasname, COUNT(*) as UNSHELTERED_NIGHTS from guestbook_personsnapshot snapshot 
JOIN guestbook_personsurvey survey ON (snapshot.idsnapshot=survey.connection_id) 
JOIN guestbook_person person ON (person.idperson=snapshot.person_id) 
WHERE (survey.prompt_id=8 AND survey.points=1 AND snapshot.timestamp >= '2018-07-01' AND snapshot.timestamp <= '2018-12-31') 
GROUP BY (person.firstname, person.lastname, person.aliasname)
ORDER BY (COUNT(*)) desc; 

//SHOWS COUNT OF UNSHELTERED NIGHTS FOR EACH PERSON IN A DATE-RANGE AND LATEST DATE UNSHELTERED
SELECT person.firstname, person.lastname, person.aliasname, COUNT(*) as NUMBER_UNSHELTERED_NIGHTS, MAX(snapshot.timestamp) as LATEST_UNSHELTERED_DATE from guestbook_personsnapshot snapshot 
JOIN guestbook_personsurvey survey ON (snapshot.idsnapshot=survey.connection_id) 
JOIN guestbook_person person ON (person.idperson=snapshot.person_id) 
WHERE (survey.prompt_id=8 AND survey.points=1 AND snapshot.timestamp >= '2018-07-01' AND snapshot.timestamp <= '2018-12-31') 
GROUP BY (person.firstname, person.lastname, person.aliasname)
ORDER BY (COUNT(*)) desc;

//one line
SELECT person.firstname, person.lastname, person.aliasname, COUNT(*) as NUMBER_UNSHELTERED_NIGHTS, MAX(snapshot.timestamp) as LATEST_UNSHELTERED_DATE from guestbook_personsnapshot snapshot JOIN guestbook_personsurvey survey ON (snapshot.idsnapshot=survey.connection_id) JOIN guestbook_person person ON (person.idperson=snapshot.person_id) WHERE (survey.prompt_id=8 AND survey.points=1 AND snapshot.timestamp >= '2018-07-01' AND snapshot.timestamp <= '2018-12-31') GROUP BY (person.firstname, person.lastname, person.aliasname)ORDER BY (COUNT(*)) desc;


05/14/2019

SELECT 
person.firstname AS FIRST, person.lastname AS LAST, person.aliasname AS ALIAS, person.aliaspin AS PIN,
person.birthdate AS DoB, gender.name AS Gender, ethnicity.name AS Race, language.name AS Language,
person."timelineStartDate" AS "1st sign in ever",
MIN(timestamp)::date AS "First seen",
MAX(timestamp)::date AS "Last sign in ever",
COUNT(*) AS "#days signed in",
COUNT(1) FILTER (WHERE service.service_id=1) AS Meals,
COUNT(1) FILTER (WHERE service.service_id=2) AS Showers,
COUNT(1) FILTER (WHERE service.service_id=4) AS Laundry,
COUNT(1) FILTER (WHERE service.service_id=3) AS Clothing,
COUNT(1) FILTER (WHERE service.service_id=5) AS Computers,
COUNT(1) FILTER (WHERE service.service_id=6) AS Nurse,
COUNT(1) FILTER (WHERE service.service_id=10) AS Consult,
COUNT(1) FILTER (WHERE survey.prompt_id=8 AND survey.points=4) AS StableHsg,
COUNT(1) FILTER (WHERE survey.prompt_id=8 AND survey.points=3) AS UnstableHsg,
COUNT(1) FILTER (WHERE survey.prompt_id=8 AND survey.points=2) AS Sheltered,
COUNT(1) FILTER (WHERE survey.prompt_id=8 AND survey.points=1) AS Unsheltered,
COUNT(1) FILTER (WHERE survey.prompt_id=8 AND survey.points=0) AS Incarcerated

FROM guestbook_personsnapshot snapshot 
JOIN guestbook_person person ON (snapshot.person_id=person.idperson)
JOIN guestbook_ethnicityresponse ethnicity ON (person.ethnicity_id=ethnicity.idethnicity)
JOIN guestbook_genderresponse gender ON (person.gender_id=gender.idgender)
JOIN guestbook_languageresponse language ON (person.language_id=language.idlanguage)
JOIN guestbook_personservicerequest service ON (snapshot.idsnapshot=service.connection_id)
JOIN guestbook_personsurvey survey ON (snapshot.idsnapshot=survey.connection_id) 
WHERE (snapshot.timestamp >= '2018-05-10' AND snapshot.timestamp <= '2019-05-14')
GROUP BY (person.firstname, person.lastname, person.aliasname, 
person.aliaspin, person.birthdate, gender.name, ethnicity.name, language.name,
person."timelineStartDate") ORDER BY COUNT(*) desc;